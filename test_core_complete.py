#!/usr/bin/env python3
"""
Script de test COMPLET pour l'app CORE
Teste TOUS les endpoints disponibles dans l'API Core
"""

import requests
import json
import time
from datetime import datetime

class CoreCompleteAPITester:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8001/api/core"
        self.auth_url = "http://127.0.0.1:8001/api/accounts"
        self.access_token = None
        self.refresh_token = None
        
        self.results = []
    
    def log_result(self, test_name, success, status_code, message, response_data=None):
        """Enregistrer le r√©sultat d'un test"""
        result = {
            "test": test_name,
            "success": success,
            "status_code": status_code,
            "message": message,
            "timestamp": datetime.now().isoformat(),
            "response_data": response_data
        }
        self.results.append(result)
        
        # Affichage color√©
        status_icon = "‚úÖ" if success else "‚ùå"
        status_text = "PASS" if success else "FAIL"
        print(f"{status_icon} {status_text} | {test_name:35} | {status_code:3} | {message}")
    
    def check_server(self):
        """V√©rifier que le serveur est accessible"""
        try:
            response = requests.get(self.auth_url + "/status/", timeout=5,
                                  headers={"Authorization": "Bearer fake_token_for_test"})
            return True
        except:
            print("‚ùå Serveur Django non accessible sur http://127.0.0.1:8001")
            return False
    
    def login_demo(self):
        """Connexion avec le compte demo pour les tests"""
        login_data = {
            "login": "demo@smartqueue.sn", 
            "password": "nouveaumotdepasse123"
        }
        
        try:
            response = requests.post(f"{self.auth_url}/login/", json=login_data, timeout=10)
            if response.status_code == 200:
                data = response.json()
                self.access_token = data["tokens"]["access"]
                self.refresh_token = data["tokens"]["refresh"]
                print("‚úÖ Connexion demo r√©ussie")
                return True
            else:
                print("‚ùå √âchec connexion demo")
                return False
        except Exception as e:
            print(f"‚ùå Erreur connexion: {e}")
            return False
    
    def make_request(self, method, endpoint, data=None, use_auth=False):
        """Faire une requ√™te HTTP avec gestion d'erreurs"""
        url = self.base_url + endpoint
        headers = {"Content-Type": "application/json"}
        
        if use_auth and self.access_token:
            headers["Authorization"] = f"Bearer {self.access_token}"
        
        try:
            if method == "GET":
                response = requests.get(url, headers=headers, timeout=10)
            elif method == "POST":
                response = requests.post(url, json=data, headers=headers, timeout=10)
            elif method == "PUT":
                response = requests.put(url, json=data, headers=headers, timeout=10)
            elif method == "PATCH":
                response = requests.patch(url, json=data, headers=headers, timeout=10)
            elif method == "DELETE":
                response = requests.delete(url, headers=headers, timeout=10)
            else:
                return None
            
            return response
        except Exception as e:
            print(f"‚ùå Erreur requ√™te {method} {endpoint}: {e}")
            return None
    
    # ==============================================
    # TESTS CORE - TOUS LES ENDPOINTS
    # ==============================================
    
    def test_01_health_check(self):
        """Test: GET /api/core/health/"""
        print("\\nüß™ TEST 1: HEALTH CHECK")
        
        response = self.make_request("GET", "/health/", use_auth=False)
        
        if response and response.status_code == 200:
            data = response.json()
            self.log_result("Health Check", True, 200, "Health check OK", 
                          {"status": data.get("status"), "checks": data.get("checks")})
        else:
            error_data = response.json() if response else None
            self.log_result("Health Check", False, response.status_code if response else 0,
                          "√âchec health check", error_data)
    
    def test_02_system_status(self):
        """Test: GET /api/core/status/"""
        print("\\nüß™ TEST 2: SYSTEM STATUS")
        
        response = self.make_request("GET", "/status/", use_auth=True)
        
        if response and response.status_code == 200:
            data = response.json()
            self.log_result("System Status", True, 200, "Status syst√®me r√©cup√©r√©", 
                          {"system": data.get("system"), "database": data.get("database")})
        elif response and response.status_code == 403:
            self.log_result("System Status", True, 403, "Acc√®s refus√© (normal pour demo user)")
        else:
            error_data = response.json() if response else None
            self.log_result("System Status", False, response.status_code if response else 0,
                          "√âchec r√©cup√©ration status", error_data)
    
    def test_03_public_config(self):
        """Test: GET /api/core/config/"""
        print("\\nüß™ TEST 3: CONFIGURATION PUBLIQUE")
        
        response = self.make_request("GET", "/config/", use_auth=True)
        
        if response and response.status_code == 200:
            data = response.json()
            self.log_result("Public Config", True, 200, "Configuration r√©cup√©r√©e", 
                          {"site_name": data.get("site_name"), "maintenance_mode": data.get("maintenance_mode")})
        else:
            error_data = response.json() if response else None
            self.log_result("Public Config", False, response.status_code if response else 0,
                          "√âchec r√©cup√©ration config", error_data)
    
    def test_04_validate_phone(self):
        """Test: POST /api/core/utils/validate-phone/"""
        print("\\nüß™ TEST 4: VALIDATION T√âL√âPHONE")
        
        test_phone_data = {
            "phone": "+221771234567"
        }
        
        response = self.make_request("POST", "/utils/validate-phone/", test_phone_data, use_auth=True)
        
        if response and response.status_code == 200:
            data = response.json()
            self.log_result("Validate Phone", True, 200, "Num√©ro valid√©", 
                          {"original": data.get("original"), "is_valid": data.get("is_valid")})
        else:
            error_data = response.json() if response else None
            self.log_result("Validate Phone", False, response.status_code if response else 0,
                          "√âchec validation t√©l√©phone", error_data)
    
    def test_05_senegal_regions(self):
        """Test: GET /api/core/utils/regions/"""
        print("\\nüß™ TEST 5: R√âGIONS S√âN√âGAL")
        
        response = self.make_request("GET", "/utils/regions/", use_auth=True)
        
        if response and response.status_code == 200:
            data = response.json()
            self.log_result("Senegal Regions", True, 200, "R√©gions r√©cup√©r√©es", 
                          {"count": data.get("count")})
        else:
            error_data = response.json() if response else None
            self.log_result("Senegal Regions", False, response.status_code if response else 0,
                          "√âchec r√©cup√©ration r√©gions", error_data)
    
    def test_06_activity_logs(self):
        """Test: GET /api/core/logs/"""
        print("\\nüß™ TEST 6: LOGS D'ACTIVIT√â")
        
        response = self.make_request("GET", "/logs/", use_auth=True)
        
        if response and response.status_code == 200:
            data = response.json()
            count = len(data.get("results", data)) if isinstance(data, dict) and "results" in data else len(data) if isinstance(data, list) else 0
            self.log_result("Activity Logs", True, 200, "Logs r√©cup√©r√©s", 
                          {"count": count})
        elif response and response.status_code == 403:
            self.log_result("Activity Logs", True, 403, "Acc√®s refus√© (normal pour demo user)")
        else:
            error_data = response.json() if response else None
            self.log_result("Activity Logs", False, response.status_code if response else 0,
                          "√âchec r√©cup√©ration logs", error_data)
    
    def test_07_maintenance_status(self):
        """Test: GET /api/core/maintenance/"""
        print("\\nüß™ TEST 7: STATUS MAINTENANCE")
        
        response = self.make_request("GET", "/maintenance/", use_auth=True)
        
        if response and response.status_code == 200:
            data = response.json()
            self.log_result("Maintenance Status", True, 200, "Status maintenance r√©cup√©r√©", 
                          {"maintenance_mode": data.get("maintenance_mode")})
        elif response and response.status_code == 403:
            self.log_result("Maintenance Status", True, 403, "Acc√®s refus√© (normal pour demo user)")
        else:
            error_data = response.json() if response else None
            self.log_result("Maintenance Status", False, response.status_code if response else 0,
                          "√âchec r√©cup√©ration maintenance", error_data)
    
    def run_all_tests(self):
        """Ex√©cuter tous les tests"""
        print("üß™ TESTEUR AUTOMATIQUE - APP CORE COMPLET")
        print("Assure-toi que le serveur Django est d√©marr√© sur http://127.0.0.1:8001\\n")
        
        if not self.check_server():
            return
        
        print("‚úÖ Serveur accessible")
        
        if not self.login_demo():
            print("‚ùå Impossible de se connecter. Tests annul√©s.")
            return
        
        print("üöÄ D√âBUT DES TESTS ENDPOINTS CORE COMPLETS")
        print("=" * 90)
        print(f"üìç URL de base: {self.base_url}")
        print(f"‚è∞ Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 90)
        
        # Lancer tous les tests dans l'ordre
        tests = [
            self.test_01_health_check,
            self.test_02_system_status,
            self.test_03_public_config,
            self.test_04_validate_phone,
            self.test_05_senegal_regions,
            self.test_06_activity_logs,
            self.test_07_maintenance_status
        ]
        
        for test in tests:
            test()
            time.sleep(0.3)  # Pause entre tests
        
        # R√©sum√©
        self.print_summary()
        self.save_results()
    
    def print_summary(self):
        """Afficher le r√©sum√© des tests"""
        total = len(self.results)
        passed = sum(1 for r in self.results if r["success"])
        failed = total - passed
        success_rate = (passed / total * 100) if total > 0 else 0
        
        print("\\n" + "=" * 90)
        print("üìä R√âSUM√â DES TESTS CORE COMPLETS")
        print("=" * 90)
        print(f"üéØ Total tests: {total}")
        print(f"‚úÖ Pass√©s: {passed}")
        print(f"‚ùå √âchou√©s: {failed}")
        print(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
        
        if failed > 0:
            print(f"\\n‚ùå TESTS √âCHOU√âS:")
            for result in self.results:
                if not result["success"]:
                    print(f"   - {result['test']}: {result['message']}")
        
        print(f"\\nüéØ **OBJECTIF ATTEINT:** {success_rate:.1f}% de couverture des endpoints Core")
    
    def save_results(self):
        """Sauvegarder les r√©sultats en JSON"""
        filename = "test_results_core_complete.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        print(f"\\nüíæ R√©sultats d√©taill√©s sauvegard√©s dans '{filename}'")

if __name__ == "__main__":
    tester = CoreCompleteAPITester()
    tester.run_all_tests()