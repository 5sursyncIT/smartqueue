# config/celery.py
"""
Configuration Celery pour SmartQueue
T√¢ches asynchrones pour g√©olocalisation intelligente
"""

import os
from celery import Celery
from django.conf import settings

# D√©finir module settings Django pour Celery
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')

# Cr√©er instance Celery
app = Celery('smartqueue')

# Configuration depuis Django settings avec pr√©fixe CELERY_
app.config_from_object('django.conf:settings', namespace='CELERY')

# Auto-d√©couverte des t√¢ches dans les apps
app.autodiscover_tasks()

# Configuration des t√¢ches p√©riodiques (Celery Beat)
from celery.schedules import crontab

app.conf.beat_schedule = {
    # G√©olocalisation - toutes les 5 minutes
    'update-user-locations': {
        'task': 'apps.locations.tasks.update_user_locations',
        'schedule': 300.0,  # 5 minutes
    },
    
    # Calcul temps de trajet - toutes les 10 minutes
    'calculate-travel-estimates': {
        'task': 'apps.locations.tasks.calculate_travel_estimates_for_active_tickets',
        'schedule': 600.0,  # 10 minutes
    },
    
    # R√©organisation files - toutes les 5 minutes
    'check-queue-reorganization': {
        'task': 'apps.locations.tasks.check_queue_reorganization',
        'schedule': 300.0,  # 5 minutes
    },
    
    # Notifications d√©part - chaque minute
    'send-departure-notifications': {
        'task': 'apps.locations.tasks.send_departure_notifications',
        'schedule': 60.0,  # 1 minute
    },
    
    # Mise √† jour trafic - toutes les 15 minutes
    'update-traffic-conditions': {
        'task': 'apps.locations.tasks.update_traffic_conditions',
        'schedule': 900.0,  # 15 minutes
    },
    
    # Nettoyage - quotidien √† 2h du matin
    'cleanup-old-location-data': {
        'task': 'apps.locations.tasks.cleanup_old_location_data',
        'schedule': crontab(hour=2, minute=0),
    },
}

# Timezone pour les t√¢ches
app.conf.timezone = 'Africa/Dakar'

# Configuration avanc√©e pour production
app.conf.update(
    # S√©rialisation
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    
    # R√©sultats
    result_expires=3600,  # 1 heure
    result_backend_transport_options={
        'visibility_timeout': 43200,  # 12 heures
        'retry_policy': {
            'timeout': 5.0
        }
    },
    
    # Configuration worker
    worker_prefetch_multiplier=4,
    worker_concurrency=4,
    worker_max_tasks_per_child=1000,
    
    # Routage des t√¢ches
    task_routes={
        # T√¢ches g√©olocalisation sur queue d√©di√©e
        'apps.locations.tasks.*': {'queue': 'locations'},
        # T√¢ches notifications rapides
        'apps.notifications.tasks.*': {'queue': 'notifications'},
        # Autres t√¢ches sur queue par d√©faut
        '*': {'queue': 'default'},
    },
)

@app.task(bind=True)
def debug_task(self):
    """T√¢che de debug"""
    print(f'Request: {self.request!r}')

# Log d√©marrage
print("üìç Celery configur√© pour SmartQueue avec g√©olocalisation intelligente")