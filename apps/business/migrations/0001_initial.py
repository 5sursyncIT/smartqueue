# Generated by Django 4.2.13 on 2025-08-28 23:52

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200, verbose_name="Nom de l'organisation")),
                ('trade_name', models.CharField(blank=True, max_length=200, verbose_name='Nom commercial')),
                ('type', models.CharField(choices=[('bank', 'Banque'), ('hospital', 'Hôpital/Clinique'), ('government', 'Administration publique'), ('telecom', 'Télécommunication'), ('insurance', 'Assurance'), ('business', 'Entreprise privée'), ('education', 'Établissement éducatif'), ('retail', 'Commerce/Retail'), ('other', 'Autre')], max_length=20, verbose_name="Type d'organisation")),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos/', verbose_name='Logo')),
                ('registration_number', models.CharField(blank=True, max_length=50, verbose_name="Numéro d'immatriculation")),
                ('phone_number', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(message='Le numéro doit être au format: +221XXXXXXXXX', regex='^\\+221[0-9]{9}$')], verbose_name='Téléphone')),
                ('email', models.EmailField(max_length=254, verbose_name='Email principal')),
                ('website', models.URLField(blank=True, verbose_name='Site web')),
                ('address', models.TextField(verbose_name='Adresse')),
                ('city', models.CharField(max_length=100, verbose_name='Ville')),
                ('region', models.CharField(choices=[('dakar', 'Dakar'), ('thies', 'Thiès'), ('saint-louis', 'Saint-Louis'), ('diourbel', 'Diourbel'), ('louga', 'Louga'), ('fatick', 'Fatick'), ('kaolack', 'Kaolack'), ('kaffrine', 'Kaffrine'), ('tambacounda', 'Tambacounda'), ('kedougou', 'Kédougou'), ('kolda', 'Kolda'), ('sedhiou', 'Sédhiou'), ('ziguinchor', 'Ziguinchor'), ('matam', 'Matam')], max_length=20, verbose_name='Région')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True, verbose_name='Longitude')),
                ('subscription_plan', models.CharField(choices=[('starter', 'Pack Starter'), ('business', 'Pack Business'), ('enterprise', 'Pack Enterprise'), ('custom', 'Pack Sur Mesure')], default='starter', max_length=20, verbose_name="Plan d'abonnement")),
                ('status', models.CharField(choices=[('active', 'Actif'), ('inactive', 'Inactif'), ('suspended', 'Suspendu'), ('trial', "Version d'essai")], default='trial', max_length=20, verbose_name='Statut')),
                ('subscription_start_date', models.DateTimeField(auto_now_add=True)),
                ('subscription_end_date', models.DateTimeField(blank=True, null=True)),
                ('max_counters', models.PositiveIntegerField(default=3, verbose_name='Max guichets')),
                ('max_staff_users', models.PositiveIntegerField(default=5, verbose_name='Max employés')),
                ('timezone', models.CharField(default='Africa/Dakar', max_length=50)),
                ('supported_languages', models.JSONField(blank=True, default=list)),
                ('default_language', models.CharField(default='fr', max_length=5)),
                ('notifications_config', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_organizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ex: Comptes, Consultations, État civil', max_length=100, verbose_name='Nom de la catégorie')),
                ('description', models.TextField(blank=True, help_text='Description détaillée de la catégorie', verbose_name='Description')),
                ('icon', models.CharField(blank=True, help_text="Nom de l'icône (ex: credit-card, user, etc.)", max_length=50, verbose_name='Icône')),
                ('color', models.CharField(default='#007bff', help_text='Couleur en format HEX (#RRGGBB)', max_length=7, verbose_name='Couleur')),
                ('display_order', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Catégorie de service',
                'verbose_name_plural': 'Catégories de services',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(help_text='Ex: Ouverture compte épargne, Consultation générale', max_length=200, verbose_name='Nom du service')),
                ('code', models.CharField(help_text='Code unique (ex: OUVCPT, CONSGEN, DEMPASS)', max_length=20, verbose_name='Code service')),
                ('description', models.TextField(blank=True, help_text='Description détaillée du service', verbose_name='Description')),
                ('instructions', models.TextField(blank=True, help_text='Instructions à afficher au client avant la prise de ticket', verbose_name='Instructions client')),
                ('default_priority', models.CharField(choices=[('low', 'Normale'), ('medium', 'Moyenne'), ('high', 'Élevée'), ('urgent', 'Urgente')], default='low', max_length=10, verbose_name='Priorité par défaut')),
                ('estimated_duration', models.PositiveIntegerField(default=5, help_text='Temps moyen de traitement en minutes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(180)], verbose_name='Durée estimée (min)')),
                ('max_wait_time', models.PositiveIntegerField(default=60, help_text="Temps d'attente maximum acceptable", validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(480)], verbose_name='Attente max (min)')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Coût du service en FCFA (optionnel)', max_digits=10, null=True, verbose_name='Coût (FCFA)')),
                ('allows_appointments', models.BooleanField(default=True, help_text='Les clients peuvent-ils prendre rendez-vous ?', verbose_name='Accepte les RDV')),
                ('requires_appointment', models.BooleanField(default=False, help_text='Le service nécessite-t-il obligatoirement un RDV ?', verbose_name='RDV obligatoire')),
                ('min_appointment_notice', models.PositiveIntegerField(default=2, help_text="Nombre d'heures minimum à l'avance pour un RDV", verbose_name='Délai min RDV (h)')),
                ('max_appointment_advance', models.PositiveIntegerField(default=30, help_text="Nombre de jours maximum à l'avance pour un RDV", verbose_name='Délai max RDV (j)')),
                ('required_documents', models.JSONField(blank=True, default=list, help_text='Liste des documents requis: ["CNI", "Justificatif domicile"]', verbose_name='Documents obligatoires')),
                ('optional_documents', models.JSONField(blank=True, default=list, help_text='Liste des documents optionnels', verbose_name='Documents optionnels')),
                ('service_hours', models.JSONField(blank=True, default=dict, help_text='Horaires spécifiques par jour: {"monday": {"start": "08:00", "end": "17:00"}}', verbose_name='Horaires du service')),
                ('sms_notifications', models.BooleanField(default=True, help_text='Envoyer des SMS pour ce service ?', verbose_name='Notifications SMS')),
                ('push_notifications', models.BooleanField(default=True, help_text='Envoyer des notifications push ?', verbose_name='Notifications push')),
                ('sms_template', models.TextField(blank=True, help_text='Template personnalisé: "Bonjour {name}, votre ticket {ticket_number}..."', verbose_name='Template SMS')),
                ('status', models.CharField(choices=[('active', 'Actif'), ('inactive', 'Inactif'), ('maintenance', 'Maintenance'), ('seasonal', 'Saisonnier')], default='active', max_length=20, verbose_name='Statut')),
                ('display_order', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('is_public', models.BooleanField(default=True, help_text='Les clients peuvent-ils voir ce service ?', verbose_name='Visible publiquement')),
                ('requires_authentication', models.BooleanField(default=False, help_text="L'utilisateur doit-il être connecté ?", verbose_name='Authentification requise')),
                ('total_tickets_issued', models.PositiveIntegerField(default=0, help_text='Nombre total de tickets pris pour ce service', verbose_name='Total tickets émis')),
                ('average_rating', models.DecimalField(decimal_places=1, default=0.0, help_text='Note moyenne donnée par les clients (sur 5)', max_digits=3, verbose_name='Note moyenne')),
                ('total_ratings', models.PositiveIntegerField(default=0, help_text="Nombre total d'évaluations reçues", verbose_name="Nombre d'évaluations")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='business.servicecategory', verbose_name='Catégorie')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='business.organization', verbose_name='Organisation')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['display_order', 'name'],
                'indexes': [models.Index(fields=['organization', 'status'], name='services_se_organiz_63d08e_idx'), models.Index(fields=['category', 'is_public'], name='services_se_categor_e29361_idx'), models.Index(fields=['requires_appointment'], name='services_se_require_0540d4_idx')],
                'unique_together': {('organization', 'code')},
            },
        ),
    ]
