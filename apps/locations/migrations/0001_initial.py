# Generated by Django 4.2.13 on 2025-08-25 15:56

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date de création automatique', verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date de dernière modification automatique', verbose_name='Modifié le')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID non-modifiable', unique=True, verbose_name='Identifiant unique')),
                ('created_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP de création')),
                ('modified_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP de modification')),
                ('is_active', models.BooleanField(default=True, help_text='Désactiver au lieu de supprimer', verbose_name='Actif')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='Désactivé le')),
                ('name', models.CharField(max_length=100, verbose_name='Nom commune/quartier')),
                ('locality_type', models.CharField(choices=[('commune', 'Commune'), ('quartier', 'Quartier'), ('village', 'Village'), ('arrondissement', 'Arrondissement')], default='commune', max_length=20, verbose_name='Type de localité')),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10, verbose_name='Latitude')),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11, verbose_name='Longitude')),
                ('population', models.PositiveIntegerField(default=0, verbose_name='Population estimée')),
                ('traffic_factor', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(5.0)], verbose_name='Facteur embouteillage')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('deactivated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deactivated', to=settings.AUTH_USER_MODEL, verbose_name='Désactivé par')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Commune',
                'verbose_name_plural': 'Communes',
                'ordering': ['region', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date de création automatique', verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date de dernière modification automatique', verbose_name='Modifié le')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID non-modifiable', unique=True, verbose_name='Identifiant unique')),
                ('created_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP de création')),
                ('modified_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP de modification')),
                ('is_active', models.BooleanField(default=True, help_text='Désactiver au lieu de supprimer', verbose_name='Actif')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='Désactivé le')),
                ('code', models.CharField(choices=[('dakar', 'Dakar'), ('thies', 'Thiès'), ('saint-louis', 'Saint-Louis'), ('diourbel', 'Diourbel'), ('louga', 'Louga'), ('fatick', 'Fatick'), ('kaolack', 'Kaolack'), ('kaffrine', 'Kaffrine'), ('tambacounda', 'Tambacounda'), ('kedougou', 'Kédougou'), ('kolda', 'Kolda'), ('sedhiou', 'Sédhiou'), ('ziguinchor', 'Ziguinchor'), ('matam', 'Matam')], max_length=20, unique=True, verbose_name='Code région')),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la région')),
                ('center_latitude', models.DecimalField(decimal_places=8, max_digits=10, verbose_name='Latitude centre')),
                ('center_longitude', models.DecimalField(decimal_places=8, max_digits=11, verbose_name='Longitude centre')),
                ('coverage_radius_km', models.PositiveIntegerField(default=50, verbose_name='Rayon couverture (km)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('deactivated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deactivated', to=settings.AUTH_USER_MODEL, verbose_name='Désactivé par')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Région',
                'verbose_name_plural': 'Régions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10, verbose_name='Latitude actuelle')),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11, verbose_name='Longitude actuelle')),
                ('accuracy_meters', models.PositiveIntegerField(default=50, verbose_name='Précision GPS (m)')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Dernière localisation')),
                ('transport_mode', models.CharField(choices=[('walking', 'À pied'), ('car', 'Voiture'), ('taxi', 'Taxi'), ('bus', 'Bus'), ('moto', 'Moto'), ('bike', 'Vélo')], default='car', max_length=20, verbose_name='Mode transport')),
                ('location_sharing_enabled', models.BooleanField(default=False, verbose_name='Partage localisation activé')),
                ('nearest_commune', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.commune', verbose_name='Commune la plus proche')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='current_location', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Localisation utilisateur',
                'verbose_name_plural': 'Localisations utilisateurs',
            },
        ),
        migrations.CreateModel(
            name='TravelTimeEstimate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date de création automatique', verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date de dernière modification automatique', verbose_name='Modifié le')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID non-modifiable', unique=True, verbose_name='Identifiant unique')),
                ('created_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP de création')),
                ('modified_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP de modification')),
                ('is_active', models.BooleanField(default=True, help_text='Désactiver au lieu de supprimer', verbose_name='Actif')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='Désactivé le')),
                ('origin_latitude', models.DecimalField(decimal_places=8, max_digits=10, verbose_name='Latitude départ')),
                ('origin_longitude', models.DecimalField(decimal_places=8, max_digits=11, verbose_name='Longitude départ')),
                ('destination_latitude', models.DecimalField(decimal_places=8, max_digits=10, verbose_name='Latitude destination')),
                ('destination_longitude', models.DecimalField(decimal_places=8, max_digits=11, verbose_name='Longitude destination')),
                ('estimated_travel_minutes', models.PositiveIntegerField(verbose_name='Temps trajet estimé (min)')),
                ('distance_km', models.FloatField(verbose_name='Distance (km)')),
                ('transport_mode', models.CharField(choices=[('walking', 'À pied'), ('car', 'Voiture'), ('taxi', 'Taxi'), ('bus', 'Bus'), ('moto', 'Moto'), ('bike', 'Vélo')], max_length=20, verbose_name='Mode transport')),
                ('traffic_factor_applied', models.FloatField(default=1.0, verbose_name='Facteur embouteillage appliqué')),
                ('weather_factor_applied', models.FloatField(default=1.0, verbose_name='Facteur météo appliqué')),
                ('time_of_day_factor', models.FloatField(default=1.0, verbose_name='Facteur heure')),
                ('safety_margin_minutes', models.PositiveIntegerField(default=10, verbose_name='Marge sécurité (min)')),
                ('recommended_departure_time', models.DateTimeField(verbose_name='Heure départ recommandée')),
                ('estimated_arrival_time', models.DateTimeField(verbose_name='Arrivée estimée')),
                ('confidence_score', models.PositiveIntegerField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score confiance (%)')),
                ('calculation_source', models.CharField(default='internal', max_length=100, verbose_name='Source calcul')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('deactivated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deactivated', to=settings.AUTH_USER_MODEL, verbose_name='Désactivé par')),
                ('destination_commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='travels_to', to='locations.commune', verbose_name='Commune destination')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.organization', verbose_name='Organisation')),
                ('origin_commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='travels_from', to='locations.commune', verbose_name='Commune départ')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Estimation temps trajet',
                'verbose_name_plural': 'Estimations temps trajet',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='commune',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communes', to='locations.region', verbose_name='Région'),
        ),
        migrations.CreateModel(
            name='WeatherCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.CharField(choices=[('sunny', 'Ensoleillé'), ('cloudy', 'Nuageux'), ('rainy', 'Pluvieux'), ('stormy', 'Orageux'), ('foggy', 'Brouillard'), ('windy', 'Venteux')], max_length=20, verbose_name='Condition météo')),
                ('travel_impact_factor', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.8), django.core.validators.MaxValueValidator(3.0)], verbose_name='Impact trajets')),
                ('temperature_celsius', models.IntegerField(validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50)], verbose_name='Température (°C)')),
                ('precipitation_mm', models.FloatField(default=0.0, verbose_name='Précipitations (mm)')),
                ('visibility_km', models.PositiveIntegerField(default=10, verbose_name='Visibilité (km)')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Dernière MAJ')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='locations.region', verbose_name='Région')),
            ],
            options={
                'verbose_name': 'Condition météorologique',
                'verbose_name_plural': 'Conditions météorologiques',
                'unique_together': {('region',)},
            },
        ),
        migrations.CreateModel(
            name='TrafficCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('fluide', 'Fluide'), ('normal', 'Normal'), ('dense', 'Dense'), ('embouteille', 'Embouteillé'), ('bloque', 'Bloqué')], default='normal', max_length=20, verbose_name='État circulation')),
                ('travel_time_minutes', models.PositiveIntegerField(verbose_name='Temps trajet (min)')),
                ('distance_km', models.FloatField(verbose_name='Distance (km)')),
                ('delay_factor', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(10.0)], verbose_name='Facteur de retard')),
                ('data_source', models.CharField(choices=[('manual', 'Saisie manuelle'), ('google', 'Google Maps'), ('osm', 'OpenStreetMap'), ('local_api', 'API locale')], default='manual', max_length=20, verbose_name='Source données')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Dernière MAJ')),
                ('reliability_score', models.PositiveIntegerField(default=80, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score fiabilité (%)')),
                ('destination_commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traffic_to', to='locations.commune', verbose_name='Commune de destination')),
                ('source_commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traffic_from', to='locations.commune', verbose_name='Commune de départ')),
            ],
            options={
                'verbose_name': 'Condition de circulation',
                'verbose_name_plural': 'Conditions de circulation',
                'ordering': ['-last_updated'],
                'unique_together': {('source_commune', 'destination_commune')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='commune',
            unique_together={('region', 'name')},
        ),
    ]
