# Generated by Django 4.2.13 on 2025-08-29 00:25

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('business', '0002_rename_services_se_organiz_63d08e_idx_business_se_organiz_c9ec9a_idx_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(help_text='Ex: BHS Dakar - Ouverture comptes', max_length=100, verbose_name='Nom de la file')),
                ('queue_type', models.CharField(choices=[('normal', 'Normale'), ('priority', 'Prioritaire'), ('vip', 'VIP'), ('appointment', 'Rendez-vous'), ('express', 'Express')], default='normal', max_length=20, verbose_name='Type de file')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('processing_strategy', models.CharField(choices=[('fifo', 'Premier arrivé, premier servi'), ('priority', 'Par priorité'), ('appointment_first', 'RDV en premier'), ('mixed', 'Mixte')], default='fifo', max_length=20, verbose_name='Stratégie de traitement')),
                ('max_capacity', models.PositiveIntegerField(default=0, help_text='0 pour capacité illimitée', verbose_name='Capacité maximum')),
                ('max_wait_time', models.PositiveIntegerField(default=120, validators=[django.core.validators.MinValueValidator(5)], verbose_name="Temps d'attente max (min)")),
                ('ticket_expiry_time', models.PositiveIntegerField(default=30, help_text='Temps après lequel un ticket expire', validators=[django.core.validators.MinValueValidator(5)], verbose_name='Expiration ticket (min)')),
                ('opening_hours', models.JSONField(blank=True, default=dict, help_text='Horaires par jour: {"monday": {"start": "08:00", "end": "17:00"}}', verbose_name="Horaires d'ouverture")),
                ('current_status', models.CharField(choices=[('active', 'Active'), ('paused', 'En pause'), ('closed', 'Fermée'), ('maintenance', 'Maintenance')], default='closed', max_length=20, verbose_name='Statut actuel')),
                ('last_ticket_number', models.PositiveIntegerField(default=0, help_text="Dernier numéro émis aujourd'hui", verbose_name='Dernier numéro de ticket')),
                ('current_ticket_number', models.PositiveIntegerField(default=0, help_text='Numéro actuellement appelé', verbose_name='Numéro de ticket actuel')),
                ('waiting_tickets_count', models.PositiveIntegerField(default=0, verbose_name='Tickets en attente')),
                ('stats_date', models.DateField(default=django.utils.timezone.now, verbose_name='Date des statistiques')),
                ('daily_tickets_issued', models.PositiveIntegerField(default=0, verbose_name="Tickets émis aujourd'hui")),
                ('daily_tickets_served', models.PositiveIntegerField(default=0, verbose_name="Tickets servis aujourd'hui")),
                ('daily_average_wait_time', models.PositiveIntegerField(default=0, verbose_name="Temps d'attente moyen (min)")),
                ('notifications_enabled', models.BooleanField(default=True, verbose_name='Notifications activées')),
                ('notify_before_turns', models.PositiveIntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Notifier X tours avant')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queues', to='business.organization', verbose_name='Organisation')),
                ('service', models.ForeignKey(help_text='Service traité par cette file', on_delete=django.db.models.deletion.CASCADE, related_name='queues', to='business.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': "File d'attente",
                'verbose_name_plural': "Files d'attente",
                'db_table': 'queues_queue',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('ticket_number', models.CharField(help_text='Numéro affiché au client (ex: A001, B012)', max_length=20, verbose_name='Numéro de ticket')),
                ('priority', models.CharField(choices=[('low', 'Normale'), ('medium', 'Moyenne'), ('high', 'Élevée'), ('urgent', 'Urgente')], default='low', max_length=10, verbose_name='Priorité')),
                ('creation_channel', models.CharField(choices=[('mobile', 'Application mobile'), ('web', 'Site web'), ('sms', 'SMS'), ('kiosk', 'Borne tactile'), ('counter', 'Au guichet'), ('phone', 'Téléphone')], default='mobile', max_length=20, verbose_name='Canal de création')),
                ('customer_notes', models.TextField(blank=True, help_text='Notes ou demandes spéciales du client', max_length=500, verbose_name='Notes du client')),
                ('documents_brought', models.JSONField(blank=True, default=list, help_text='Liste des documents que le client a apportés', verbose_name='Documents apportés')),
                ('status', models.CharField(choices=[('waiting', 'En attente'), ('called', 'Appelé'), ('serving', 'En cours de service'), ('served', 'Servi'), ('cancelled', 'Annulé'), ('expired', 'Expiré'), ('no_show', 'Absent'), ('transferred', 'Transféré')], default='waiting', max_length=20, verbose_name='Statut')),
                ('queue_position', models.PositiveIntegerField(default=0, verbose_name='Position dans la file')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('called_at', models.DateTimeField(blank=True, null=True, verbose_name='Appelé le')),
                ('service_started_at', models.DateTimeField(blank=True, null=True, verbose_name='Service commencé le')),
                ('service_ended_at', models.DateTimeField(blank=True, null=True, verbose_name='Service terminé le')),
                ('expires_at', models.DateTimeField(help_text="Date/heure d'expiration du ticket", verbose_name='Expire le')),
                ('wait_time_minutes', models.PositiveIntegerField(default=0, verbose_name="Temps d'attente (min)")),
                ('service_time_minutes', models.PositiveIntegerField(default=0, verbose_name='Temps de service (min)')),
                ('call_count', models.PositiveIntegerField(default=0, help_text='Nombre de fois que ce ticket a été appelé', verbose_name="Nombre d'appels")),
                ('notifications_sent', models.JSONField(blank=True, default=list, verbose_name='Notifications envoyées')),
                ('created_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP de création')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL, verbose_name='Client')),
                ('queue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='queue_management.queue', verbose_name="File d'attente")),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='business.service', verbose_name='Service')),
                ('serving_agent', models.ForeignKey(blank=True, help_text='Agent qui sert ce client', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='served_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Agent')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'db_table': 'tickets_ticket',
                'ordering': ['priority', 'created_at'],
                'indexes': [models.Index(fields=['queue', 'status'], name='tickets_tic_queue_i_63501f_idx'), models.Index(fields=['customer', 'created_at'], name='tickets_tic_custome_30cf70_idx'), models.Index(fields=['status', 'priority'], name='tickets_tic_status_b256f6_idx'), models.Index(fields=['expires_at'], name='tickets_tic_expires_e92ba3_idx'), models.Index(fields=['created_at'], name='tickets_tic_created_5dd600_idx')],
                'unique_together': {('queue', 'ticket_number')},
            },
        ),
        migrations.AddIndex(
            model_name='queue',
            index=models.Index(fields=['organization', 'current_status'], name='queues_queu_organiz_cf1ebf_idx'),
        ),
        migrations.AddIndex(
            model_name='queue',
            index=models.Index(fields=['service', 'is_active'], name='queues_queu_service_27bd68_idx'),
        ),
        migrations.AddIndex(
            model_name='queue',
            index=models.Index(fields=['stats_date'], name='queues_queu_stats_d_13e907_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='queue',
            unique_together={('service', 'organization', 'queue_type')},
        ),
    ]
