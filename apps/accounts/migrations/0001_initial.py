# Generated by Django 4.2.13 on 2025-08-14 19:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Identifiant unique')),
                ('user_type', models.CharField(choices=[('customer', 'Client'), ('staff', 'Personnel'), ('admin', 'Administrateur'), ('super_admin', 'Super Admin')], default='customer', help_text="Définit le rôle de l'utilisateur dans SmartQueue", max_length=20, verbose_name="Type d'utilisateur")),
                ('phone_number', models.CharField(help_text='Format requis: +221XXXXXXXXX', max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message='Le numéro doit être au format: +221XXXXXXXXX', regex='^\\+221[0-9]{9}$')], verbose_name='Numéro de téléphone')),
                ('preferred_language', models.CharField(choices=[('fr', 'Français'), ('wo', 'Wolof'), ('en', 'English')], default='fr', help_text="Langue d'affichage de l'interface", max_length=5, verbose_name='Langue préférée')),
                ('is_phone_verified', models.BooleanField(default=False, help_text='Le numéro a été vérifié par SMS', verbose_name='Téléphone vérifié')),
                ('verification_code', models.CharField(blank=True, help_text='Code à 6 chiffres envoyé par SMS', max_length=6, null=True, verbose_name='Code de vérification')),
                ('verification_code_expires', models.DateTimeField(blank=True, null=True, verbose_name='Expiration du code')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Photo de profil')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Féminin'), ('O', 'Autre')], max_length=1, verbose_name='Genre')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Ville')),
                ('push_notifications_enabled', models.BooleanField(default=True, help_text='Recevoir des notifications sur mobile', verbose_name='Notifications push')),
                ('sms_notifications_enabled', models.BooleanField(default=True, help_text="Recevoir des SMS pour les files d'attente", verbose_name='Notifications SMS')),
                ('email_notifications_enabled', models.BooleanField(default=True, help_text='Recevoir des emails de confirmation', verbose_name='Notifications email')),
                ('last_mobile_login', models.DateTimeField(blank=True, null=True, verbose_name='Dernière connexion mobile')),
                ('last_ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dernière adresse IP')),
                ('terms_accepted', models.BooleanField(default=False, help_text="A accepté les conditions d'utilisation", verbose_name='Conditions acceptées')),
                ('terms_accepted_date', models.DateTimeField(blank=True, null=True, verbose_name='Date acceptation conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'accounts_user',
                'indexes': [models.Index(fields=['user_type'], name='accounts_us_user_ty_b6cfc8_idx'), models.Index(fields=['phone_number'], name='accounts_us_phone_n_613c4a_idx'), models.Index(fields=['is_phone_verified'], name='accounts_us_is_phon_34e416_idx'), models.Index(fields=['created_at'], name='accounts_us_created_4734df_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
